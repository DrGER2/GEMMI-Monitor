#!/bin/ksh

# 221124 drger; Standard log name; added gemmi_monitor.sh
# 211224 drger; Capture gemmi_final output in log file

# 221120 drger; Save the last N gemmi log files
xmoveLogFile()
{
test -f "$1" && mv -v "$1" "$2"
}
xrotateLogFiles()
{
cd $LOGDIR
test -f gemmi-9.log && rm -v gemmi-9.log
xmoveLogFile gemmi-8.log gemmi-9.log
xmoveLogFile gemmi-7.log gemmi-8.log
xmoveLogFile gemmi-6.log gemmi-7.log
xmoveLogFile gemmi-5.log gemmi-6.log
xmoveLogFile gemmi-4.log gemmi-5.log
xmoveLogFile gemmi-3.log gemmi-4.log
xmoveLogFile gemmi-2.log gemmi-3.log
xmoveLogFile gemmi-1.log gemmi-2.log
xmoveLogFile gemmi-0.log gemmi-1.log
xmoveLogFile gemmi.log gemmi-0.log
}

mount -uw /mnt/persistence
export LOGDIR=/mnt/persistence/log
xrotateLogFiles
xlogfile=${LOGDIR}/gemmi.log
umask 022
exec > ${xlogfile} 2>&1
echo "[GEMMI] Log created: $(getTime) $(date)"
echo "[GEMMI] MMI software version: $(cat /tmp/sw_trainname.txt)"

# 20211224 drger; Added log file, print ROME events, others:
# printromeevents value (0 = off; 1 = on):
xpreval=1
# poithresholdspeed value (km/h):
xpoitsval=200
# max ping time (msec) value; prod is 2000:
xmptval=4000
# LOD mode; prod is 12:
xlodmode=12
# Frame stats; prod is 0:
xframestats=0
# show connection status overlay flag:
extraArgs="-showconnectionstatus"

# For debugging purposes, off by default
if [[ 0 -eq 1 ]] ; then
if [ -a /mnt/nav/gemmi/debug_memcpu.sh ] ; then
  cp /mnt/nav/gemmi/debug_memcpu.sh /tmp
  chmod 777 /tmp/debug_memcpu.sh
  /tmp/debug_memcpu.sh &
fi
fi

export Region13=$(ls -l /database/MMI3G_MapArchive.xar | grep 13)
if [[ $Region13 -eq 13 ]] ; then
  export AGCC2=1
else
  export AGCC2=0
fi

# Region Check
case `cat /etc/hmi_country.txt`
in
  "\"NAR\"")
    echo "GEMMI: Detected NAR region."
    export myRegion=0;;
  "\"EUROPE\"")
    echo "GEMMI: Detected ECE region."
    export myRegion=2;;
  "\"CHINA\"")
    echo "GEMMI: Detected CN region."
    export myRegion=1;;
  "\"KOREA\"")
    echo "GEMMI: Detected KR region."
    export myRegion=1;;
  "\"JAPAN\"")
    echo "GEMMI: Detected JP region."
    export myRegion=1;;
  *)
    echo "GEMMI: Unknown region. Defaulting to ECE."
    export myRegion=2;;
esac

# RSE Flag Check
echo "GEMMI checking if on RSE Unit"
export variantArgs="-streetviewtexeldensity 2.0"
if [ -a /mnt/efs-system/RSE ]; then
  variantArgs="$variantArgs -maxcpu 1.0 -targetcpu 1.0 -rse"
  export myTargetPrio=9
  echo "VARIANT=REAR"
else
  export myTargetPrio=10
  echo "VARIANT=FRONT"
fi

export myPID=`print $$`
export myPidin=`pidin -p $myPID -f p`
export myPrio=`echo $myPidin | sed -e "s/^.* //" -e "s/r$//"`
export myRelPrio=$(($myPrio - $myTargetPrio))

# sanity check on myRelPrio
if [[ ($myRelPrio -gt 4) || ($myRelPrio -lt -4) ]]
then
  export myRelPrio=0
fi

checkCachePartition()
{
  if ( ! [ -d /mnt/img-cache/gemmi ] )
  then
    echo "[GEMMI] Restoring /mnt/img-cache (corrupted/repartitioned/reformatted)"
    echo "[GEMMI] All cache data is lost, require initial login"
    mkdir /mnt/img-cache/gemmi
    mkdir /mnt/img-cache/gemmi/.config
    mkdir /mnt/img-cache/gemmi/cache
    mkdir /mnt/img-cache/gemmi/scache
    mkdir /mnt/img-cache/gemmi/temp
  fi

  if ( ! [ -d /mnt/img-cache/gemmi/.config ] )
  then
    echo "[GEMMI] Restoring /mnt/img-cache/gemmi/.config (corrupted)"
    mkdir /mnt/img-cache/gemmi/.config
  fi

  if ( ! [ -d /mnt/img-cache/gemmi/cache ] )
  then
    echo "[GEMMI] Restoring /mnt/img-cache/gemmi/cache (corrupted)"
    mkdir /mnt/img-cache/gemmi/cache
  fi

  if ( ! [ -d /mnt/img-cache/gemmi/scache ] )
  then
    echo "[GEMMI] Restoring /mnt/img-cache/gemmi/scache (corrupted)"
    mkdir /mnt/img-cache/gemmi/scache
  fi

  if ( ! [ -d /mnt/img-cache/gemmi/temp ] )
  then
    echo "[GEMMI] Restoring /mnt/img-cache/gemmi/temp (corrupted)"
    mkdir /mnt/img-cache/gemmi/temp
  fi
}

if [ -x /mnt/nav/gemmi/gemmi_final ]
then
  export GEMMI_NAME=gemmi_final
  export LD_LIBRARY_PATH=/mnt/nav/gemmi

  if [ -a /tmp/floater ]
  then
    echo "[GEMMI] Remove floater"
    rm -rf /dev/shmem/floater
  fi

  export memorySettings="-maxmem 55 -targetmem 40"

  checkCachePartition

  # launch the gemmi_final monitor
  if [ -x /mnt/nav/gemmi/gemmi_monitor.sh ]
  then
    nice /mnt/nav/gemmi/gemmi_monitor.sh &
  fi

  while true
  do
    if [ -a /tmp/reducedmemory ]
    then
      echo "[GEMMI] Found reducedmemory file, reducing GEMMI memory targets"
      export memorySettings="-maxmem 45 -targetmem 30"
      rm /tmp/reducedmemory
    fi
    cd /
    if [ $myRelPrio -ne 0 ]
    then
      echo "[GEMMI] run_gemmi.sh script is running at priority $myPrio."
      echo "[GEMMI] GEMMI is being launched with 'nice -n $myRelPrio'."
    fi
    echo "[GEMMI] $GEMMI_NAME start: $(getTime) $(date)"
    nice -n $myRelPrio $LD_LIBRARY_PATH/$GEMMI_NAME -roadwidthscale 0.0116 \
      -opt 1 -prefetch 1 -printromeevents $xpreval \
      -poithresholdspeed $xpoitsval -lodmode $xlodmode -roadnamescale 0.85 \
      -roadnamecolor ffd0ffff -framestats $xframestats -minsleep 10 \
      -maxfps 12 $memorySettings -maxpingtime $xmptval \
      -createroadsinmultibunch -trafficregion $myRegion $variantArgs \
      $extraArgs --tp=/etc/DefaultScope.hbtc --bp
    # exit if flag is set
    if [ -a /tmp/factory_reset_gemmi ]
    then
      echo "[GEMMI] factory reset active, run_gemmi.sh exit"
      exit 0
    fi
    # Sleep a bit before trying to restart the gemmi_final binary
    echo "[GEMMI] $GEMMI_NAME terminated; restart in 5 sec."
    sleep 5
  done
else
  echo "[GEMMI] Not installed"
fi
